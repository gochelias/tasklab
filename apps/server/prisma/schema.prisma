datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

enum Role {
    USER
    ADMIN
}

enum TaskStatus {
    NOT_STARTED
    IN_PROGRESS
    COMPLETED
}

model User {
    id        String    @id @default(cuid())
    avatar    String?
    name      String
    username  String    @unique
    email     String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    comments  Comment[]
    roles     Role[]

    createdTasks  Task[] @relation("createdTasks")
    assignedTasks Task[] @relation("assignedTasks")

    @@map("users")
}

model Task {
    id          String     @id @default(cuid())
    title       String     @db.VarChar(50)
    description String     @db.VarChar(3000)
    comments    Comment[]
    startsAt    DateTime
    endsAt      DateTime
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    status      TaskStatus @default(NOT_STARTED)

    author   User?   @relation("createdTasks", fields: [authorId], references: [id])
    authorId String?

    assignedTo User[] @relation("assignedTasks")

    tags Tag[]

    @@map("tasks")
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.VarChar(254)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    Task   Task?   @relation(fields: [taskId], references: [id])
    taskId String?

    @@map("comments")
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @db.VarChar(30)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tasks Task[] @relation(references: [id])

    @@map("tags")
}
